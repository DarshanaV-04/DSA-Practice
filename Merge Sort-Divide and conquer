#include <iostream>
using namespace std;
void merge(int arr[], int left[], int leftSize, int right[], int rightSize) {
    int i = 0, j = 0, k = 0;

    // Merge the arrays while there are elements in both
    while (i < leftSize && j < rightSize) {
        if (left[i] <= right[j]) {
            arr[k++] = left[i++];
        } else {
            arr[k++] = right[j++];
        }
    }
    while (i < leftSize) {
        arr[k++] = left[i++];
    }

    // Copy remaining elements from right array (if any)
    while (j < rightSize) {
        arr[k++] = right[j++];
    }
}

// Merge Sort function
void mergeSort(int arr[], int size) {
    if (size < 2) {
        return;
    }

    int mid = size / 2;

    // Split the array into two halves
    int* left = new int[mid];
    int* right = new int[size - mid];

    for (int i = 0; i < mid; i++) {
        left[i] = arr[i];
    }
    for (int i = mid; i < size; i++) {
        right[i - mid] = arr[i];
    }

    // Recursively sort the left and right halves
    mergeSort(left, mid);
    mergeSort(right, size - mid);

    // Merge the sorted halves
    merge(arr, left, mid, right, size - mid);

    // Free the memory allocated for temporary arrays
    delete[] left;
    delete[] right;
}

// Utility function to print the array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

// Main function to test the Merge Sort
int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int size = sizeof(arr) / sizeof(arr[0]);

    cout << "Original array:" << endl;
    printArray(arr, size);

    mergeSort(arr, size);

    cout << "\nSorted array:" << endl;
    printArray(arr, size);

    return 0;
}
