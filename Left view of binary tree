#include <iostream>
#include <map>
#include <queue>
#include <vector>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) : val(value), left(nullptr), right(nullptr) {}
};

// Function to build a binary tree from user input
TreeNode* buildTree() {
    cout << "Enter the values for the tree in level-order (-1 for null):" << endl;
    int value;
    cin >> value;
    if (value == -1) return nullptr;

    TreeNode* root = new TreeNode(value);
    queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        TreeNode* current = q.front();
        q.pop();

        cin >> value;
        if (value != -1) {
            current->left = new TreeNode(value);
            q.push(current->left);
        }

        cin >> value;
        if (value != -1) {
            current->right = new TreeNode(value);
            q.push(current->right);
        }
    }
    return root;
}

void leftView(TreeNode* root) {
    if (!root) return;

    queue<TreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        int levelSize = q.size();

        for (int i = 0; i < levelSize; i++) {
            TreeNode* current = q.front();
            q.pop();
            if (i == 0) { // First node of the current level
                cout << current->val << " ";
            }
            if (current->left) q.push(current->left);
            if (current->right) q.push(current->right);
        }
    }
    cout << endl;
}
